<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Socket on Notes</title>
    <link>https://jreisinger.github.io/notes/tags/socket/</link>
    <description>Recent content in Socket on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 25 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jreisinger.github.io/notes/tags/socket/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TCP sockets with Go</title>
      <link>https://jreisinger.github.io/notes/posts/go-tcp-socket/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/go-tcp-socket/</guid>
      <description>This is an HTTP client implemented using socket-level programming:
// Usage: go run getHeadInfo.go reisinge.net:80 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;net&amp;#34; &amp;#34;os&amp;#34; ) func main() { service := os.Args[1] tcpAddr, err := net.ResolveTCPAddr(&amp;#34;tcp&amp;#34;, service) checkError(err) conn, err := net.DialTCP(&amp;#34;tcp&amp;#34;, nil, tcpAddr) checkError(err) _, err = conn.Write([]byte(&amp;#34;HEAD / HTTP/1.0\r\n\r\n&amp;#34;)) checkError(err) result, err := ioutil.ReadAll(conn) checkError(err) fmt.Printf(&amp;#34;%s\n&amp;#34;, result) } func checkError(err error) { if err != nil { fmt.Fprintf(os.Stderr, &amp;#34;%v\n&amp;#34;, err.Error()) os.</description>
    </item>
    
  </channel>
</rss>