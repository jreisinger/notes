<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Notes</title>
    <link>https://jreisinger.github.io/notes/tags/go/</link>
    <description>Recent content in Go on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 25 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jreisinger.github.io/notes/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TCP sockets with Go</title>
      <link>https://jreisinger.github.io/notes/posts/go-tcp-socket/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/go-tcp-socket/</guid>
      <description>This is an HTTP client implemented using socket-level programming:
// Usage: go run getHeadInfo.go reisinge.net:80 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;net&amp;#34; &amp;#34;os&amp;#34; ) func main() { service := os.Args[1] tcpAddr, err := net.ResolveTCPAddr(&amp;#34;tcp&amp;#34;, service) checkError(err) conn, err := net.DialTCP(&amp;#34;tcp&amp;#34;, nil, tcpAddr) checkError(err) _, err = conn.Write([]byte(&amp;#34;HEAD / HTTP/1.0\r\n\r\n&amp;#34;)) checkError(err) result, err := ioutil.ReadAll(conn) checkError(err) fmt.Printf(&amp;#34;%s\n&amp;#34;, result) } func checkError(err error) { if err != nil { fmt.Fprintf(os.Stderr, &amp;#34;%v\n&amp;#34;, err.Error()) os.</description>
    </item>
    
    <item>
      <title>Go directory structure</title>
      <link>https://jreisinger.github.io/notes/posts/go-directory-structure/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/go-directory-structure/</guid>
      <description>NOTE: See How to Write Go Code for official tutorial.
Go has a strong opinion about directory structure.
## Set location of your workspace (It&amp;#39;s used by the `go` tool) $ export GOPATH=`pwd` $ echo $GOPATH /Users/reisinge/temp/go A single file program:
## Create a program $ tree . └── src └── hello # this directory name is the program name └── main.go # package main 2 directories, 1 file ## Install the program $ go install hello # compile and install all *.</description>
    </item>
    
    <item>
      <title>Sorting with Go</title>
      <link>https://jreisinger.github.io/notes/posts/sorting-with-go/</link>
      <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/sorting-with-go/</guid>
      <description>package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sort&amp;#34; ) // A type with the three methods required for sorting. type StringSlice []string func (p StringSlice) Len() int { return len(p) } func (p StringSlice) Less(i, j int) bool { return p[i] &amp;lt; p[j] } func (p StringSlice) Swap(i, j int) { p[i], p[j] = p[j], p[i] } func main() { names := []string{&amp;#34;Xavier&amp;#34;, &amp;#34;John&amp;#34;, &amp;#34;Eve&amp;#34;, &amp;#34;Adam&amp;#34;} // sort.Strings(names) has the same effect 	sort.</description>
    </item>
    
    <item>
      <title>Reading from command line arguments or from STDIN</title>
      <link>https://jreisinger.github.io/notes/posts/read-args-or-stdin/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/read-args-or-stdin/</guid>
      <description>Go
package main import ( &amp;#34;bufio&amp;#34; &amp;#34;os&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { if len(os.Args) &amp;gt; 1 { // we have command line args  for _, arg := range os.Args[1:] { fmt.Println(arg) } } else { // read from STDIN  stdin := bufio.NewScanner(os.Stdin) for stdin.Scan() { fmt.Println(stdin.Text()) } } } Perl
#!/usr/bin/env perl use 5.014; # includes strict use warnings; use autodie; if (@ARGV) { say for @ARGV; } else { print for &amp;lt;STDIN&amp;gt;; # but all lines at once }</description>
    </item>
    
    <item>
      <title>Heap vs Stack</title>
      <link>https://jreisinger.github.io/notes/posts/heap-vs-stack/</link>
      <pubDate>Tue, 07 Aug 2018 08:43:41 +0200</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/heap-vs-stack/</guid>
      <description>Both are memory regions.
Stack (temporary to a function)
 stores temporary variables created by functions LIFO data structure with push/pop operations all vars are popped off when function exits very fast limited in size  Heap (global)
 not as tightly managed by CPU in C you have to manage it yourself via malloc(), calloc() or realloc() if you fail you get a memory leak slower access because pointers are used limited only by physical memory  Go example:</description>
    </item>
    
  </channel>
</rss>