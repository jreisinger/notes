<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Notes</title>
    <link>https://jreisinger.github.io/notes/tags/python/</link>
    <description>Recent content in python on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 13 May 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jreisinger.github.io/notes/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python basics</title>
      <link>https://jreisinger.github.io/notes/posts/python/</link>
      <pubDate>Fri, 13 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/python/</guid>
      <description>All Python objects are instances of one class or another.
Variables Python variables are more like labels that reference various objects (integers, strings, class instances, &amp;hellip;):
x = &amp;#34;2&amp;#34; # x is string x = int(x) # x is now integer  types are associated with objects, not variables variables are not checked for type at compile time variables don&amp;rsquo;t have to be declared variables can have any built-in data type, user-defined object, function, or module assigned to them  Built-in data types Built-in data types can be manipulated with operators, built-in functions, library functions, or a data type&amp;rsquo;s own methods.</description>
    </item>
    
    <item>
      <title>Perl to Python</title>
      <link>https://jreisinger.github.io/notes/posts/perl2python/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/perl2python/</guid>
      <description>Going from Perl to Python &amp;hellip;
Data structures Both languages are dynamic so you can mix types in data structures (data containers).
Perl Python Example Note ---- ------ ------- ----- array list [ 1, 3.4, &amp;#39;hello&amp;#39; ] you can mix types list tuple ( 10, 20, 30 ) immutable, parens are optional hash dictionary { &amp;#39;a&amp;#39;: 3, &amp;#39;b&amp;#39;: 42 } have to quote strings in Python n/a set set( [1, 2, 3] ) can be faked with hash in Perl In lists/tuples the comma is the operator.</description>
    </item>
    
    <item>
      <title>Signals</title>
      <link>https://jreisinger.github.io/notes/posts/signals/</link>
      <pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/signals/</guid>
      <description>Signal &amp;ndash; a message from the kernel (or a process) to a process. Used for:
 errors (kernel saying: &amp;ldquo;You can&amp;rsquo;t touch that area of memory!&amp;rdquo;) events (death of a child, interrupt with Ctrl-C)  To ask the kernel to a send a signal:
kill [-SIGNAL] PID # default signal is TERM Selected signal types:
 TERM (15) - terminate a process (polite request to die, i.e. can and should be caught) KILL (9) - terminate a process at the kernel level and remove it forcibly from memory (cannot be caught, blocked or ignored) INT (2) - interrupt, sent by the terminal driver on Ctrl-C.</description>
    </item>
    
  </channel>
</rss>