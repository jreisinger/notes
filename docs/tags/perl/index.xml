<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl on Notes</title>
    <link>https://jreisinger.github.io/notes/tags/perl/</link>
    <description>Recent content in Perl on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jreisinger.github.io/notes/tags/perl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hashes</title>
      <link>https://jreisinger.github.io/notes/posts/hashes/</link>
      <pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/hashes/</guid>
      <description>There are several classes of hashes (hash functions) used for different purposes:
 hash datatype in Perl (maps a lookup string to a memory location; fast and short) networking protocols checks like CRC or Adler (rarely go over 32-bits in length) cryptographic hashes (this article is about them)  Cryptographic hashes
 provide an encryption using an algorithm and no key a variable length plaintext is &amp;ldquo;hashed&amp;rdquo; into a fixed-length hash value (also called a message digest or a hash) primarily used to provide integrity &amp;ndash;&amp;gt; if the hash changed, the plaintext must have changed have an &amp;ldquo;avalanche effect&amp;rdquo; &amp;ndash;&amp;gt; changing just one bit of input creates a completely different output  Collisions</description>
    </item>
    
    <item>
      <title>Reading from command line arguments or from STDIN</title>
      <link>https://jreisinger.github.io/notes/posts/read-args-or-stdin/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/read-args-or-stdin/</guid>
      <description>Go
package main import ( &amp;quot;bufio&amp;quot; &amp;quot;os&amp;quot; &amp;quot;fmt&amp;quot; ) func main() { if len(os.Args) &amp;gt; 1 { // we have command line args for _, arg := range os.Args[1:] { fmt.Println(arg) } } else { // read from STDIN stdin := bufio.NewScanner(os.Stdin) for stdin.Scan() { fmt.Println(stdin.Text()) } } }  Perl
#!/usr/bin/env perl use 5.014; # includes strict use warnings; use autodie; if (@ARGV) { say for @ARGV; } else { print for &amp;lt;STDIN&amp;gt;; # but all lines at once }  </description>
    </item>
    
    <item>
      <title>Signals</title>
      <link>https://jreisinger.github.io/notes/posts/signals/</link>
      <pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/signals/</guid>
      <description>Signal &amp;ndash; a message from the kernel (or a process) to a process. Used for:
 errors (kernel saying: &amp;ldquo;You can&amp;rsquo;t touch that area of memory!&amp;rdquo;) events (death of a child, interrupt with Ctrl-C)  To ask the kernel to a send a signal:
kill [-SIGNAL] PID # default signal is TERM  Selected signal types:
 TERM (15) - terminate a process (polite request to die, i.e. can and should be caught) KILL (9) - terminate a process at the kernel level and remove it forcibly from memory (cannot be caught, blocked or ignored) INT (2) - interrupt, sent by the terminal driver on Ctrl-C.</description>
    </item>
    
  </channel>
</rss>