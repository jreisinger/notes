<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Notes</title>
    <link>https://jreisinger.github.io/notes/posts/</link>
    <description>Recent content in Posts on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 07 Aug 2018 08:43:41 +0200</lastBuildDate>
    
	<atom:link href="https://jreisinger.github.io/notes/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Heap vs Stack</title>
      <link>https://jreisinger.github.io/notes/posts/heap-vs-stack/</link>
      <pubDate>Tue, 07 Aug 2018 08:43:41 +0200</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/heap-vs-stack/</guid>
      <description>Both are memory regions.
Stack
 stores temporarary variables created by functions LIFO data structure with push/pop operations all vars are popped off when function exits very fast limited in size  Heap
 not as tightly managed by CPU in C you have to manage it yourself via malloc(), calloc() or realloc() if you fail you get a memory leak slower access because pointers are used limited only by physical memory  Go example:</description>
    </item>
    
    <item>
      <title>Devops</title>
      <link>https://jreisinger.github.io/notes/posts/devops/</link>
      <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/devops/</guid>
      <description>The opposite of DevOps is despair. &amp;ndash; Gene Kim
If HW and SW are sufficiently fault tolerant, the remaining problems are human. &amp;ndash; TPoCSA
CAMS: culture, automation, measurement, and sharing. &amp;ndash; D. Edwards, J. Willis (2010)
 DevOps is a set of techniques to solve the chronic conflict between Development an IT Operations. This conflict causes:
 increased time to market problematic code deployments increased number of Sev 1 outages unplanned work technical debt  The techniques are:</description>
    </item>
    
    <item>
      <title>GRUB 2</title>
      <link>https://jreisinger.github.io/notes/posts/grub2/</link>
      <pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/grub2/</guid>
      <description>GRUB 2 vs. GRUB (Legacy)
 simpler code structure modular model internationalization (support for non-ASCII character sets) GUI interface  /boot/grub/grub.cfg still exists but is not supposed to be edited.
Files and directories
 /boot/grub/grub.cfg - automatically created central config file /etc/default/grub - general options (no menu entries) /etc/grub.d - helper scripts; you can add scripts here to add menu entries  GRUB 2 generally automates lot of steps (helper scripts search the partitions for known OSs and create the required entries).</description>
    </item>
    
    <item>
      <title>Meaning of Life by Zentara</title>
      <link>https://jreisinger.github.io/notes/posts/meaning-of-life-by-zentara/</link>
      <pubDate>Mon, 19 Jan 2015 17:07:00 +0200</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/meaning-of-life-by-zentara/</guid>
      <description>http://zentara.net/ =&amp;gt; Deep Thoughts =&amp;gt; Want to know the meaning of life?
This is the essence of the meaning of life Once you read it, you will never be able to get it out of your subconcious mind. It will crack open the door to the next level of conciousness. .................................................................... Your most previous incarnation, was a 9-month life inside your mother. During this life, you were developing the organs needed to exist on the next level.</description>
    </item>
    
    <item>
      <title>Generate Random File</title>
      <link>https://jreisinger.github.io/notes/posts/gen_rand_file/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/gen_rand_file/</guid>
      <description> How to generate a file of a defined size (ex. 100MB) with random content
binary file: dd if=/dev/urandom of=file.dat bs=1M count=100  or
dd if=/dev/urandom of=file.dat bs=1024 count=`echo $((100*1024))`   bs &amp;ndash; block size in bytes  text file: base64 /dev/urandom | dd of=file.txt bs=1M count=100 iflag=fullblock   base64 represents (encodes) binary data using printable ASCII characters  empty file: dd if=/dev/zero of=file.dat bs=1M count=100  </description>
    </item>
    
    <item>
      <title>System administration philosophy of AE. Frish</title>
      <link>https://jreisinger.github.io/notes/posts/sysadmin-philosophy/</link>
      <pubDate>Sat, 01 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/sysadmin-philosophy/</guid>
      <description> Know how things work. Plan it before you do it. Make it reversible (backups help a lot with this one). Make changes incrementally. Test, test, test, before you unleash it on the world.  </description>
    </item>
    
  </channel>
</rss>