<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Notes</title>
    <link>https://jreisinger.github.io/notes/posts/</link>
    <description>Recent content in Posts on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jreisinger.github.io/notes/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hashes</title>
      <link>https://jreisinger.github.io/notes/posts/hashes/</link>
      <pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/hashes/</guid>
      <description>There are several classes of hashes (hash functions) used for different purposes:
 hash datatype in Perl (maps a lookup string to a memory location; fast and short) networking protocols checks like CRC or Adler (rarely go over 32-bits in length) cryptographic hashes (this article is about them)  Cryptographic hashes
 provide an encryption using an algorithm and no key a variable length plaintext is &amp;ldquo;hashed&amp;rdquo; into a fixed-length hash value (also called a message digest or a hash) primarily used to provide integrity &amp;ndash;&amp;gt; if the hash changed, the plaintext must have changed have an &amp;ldquo;avalanche effect&amp;rdquo; &amp;ndash;&amp;gt; changing just one bit of input creates a completely different output  Collisions</description>
    </item>
    
    <item>
      <title>Reading from command line arguments or from STDIN</title>
      <link>https://jreisinger.github.io/notes/posts/read-args-or-stdin/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/read-args-or-stdin/</guid>
      <description>Go
package main import ( &amp;#34;bufio&amp;#34; &amp;#34;os&amp;#34; &amp;#34;fmt&amp;#34; ) func main() { if len(os.Args) &amp;gt; 1 { // we have command line args  for _, arg := range os.Args[1:] { fmt.Println(arg) } } else { // read from STDIN  stdin := bufio.NewScanner(os.Stdin) for stdin.Scan() { fmt.Println(stdin.Text()) } } } Perl
#!/usr/bin/env perl use 5.014; # includes strict use warnings; use autodie; if (@ARGV) { say for @ARGV; } else { print for &amp;lt;STDIN&amp;gt;; # but all lines at once }</description>
    </item>
    
    <item>
      <title>Heap vs Stack</title>
      <link>https://jreisinger.github.io/notes/posts/heap-vs-stack/</link>
      <pubDate>Tue, 07 Aug 2018 08:43:41 +0200</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/heap-vs-stack/</guid>
      <description>Both are memory regions.
Stack
 stores temporarary variables created by functions LIFO data structure with push/pop operations all vars are popped off when function exits very fast limited in size  Heap
 not as tightly managed by CPU in C you have to manage it yourself via malloc(), calloc() or realloc() if you fail you get a memory leak slower access because pointers are used limited only by physical memory  Go example:</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://jreisinger.github.io/notes/posts/kubernetes/</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/kubernetes/</guid>
      <description>Namespace  group of objects in a cluster  kubectl get namespaces Context  to change the default namespace more permanently to manage different clusters to manage different users  # list contexts kubectl config view # switch context kubectl config use-context &amp;lt;context-name&amp;gt; Objects  everything in Kubernetes is represented by a RESTful resource - [Kubernetes] object each object exists at a unique HTTP path, e.g. https://your-k8s.com/api/v1/namespaces/default/pods/my-pod the kubectl makes requests to these URLs to access the objects  # view Kubernetes objects kubectl get # all resource types kubectl get &amp;lt;resource&amp;gt; # all resources in a namespace kubectl get &amp;lt;resource&amp;gt; &amp;lt;object&amp;gt; # specific resource  # details about an object kubectl describe &amp;lt;resource&amp;gt; &amp;lt;object&amp;gt; # output flags -o wide # more details -o json # complete object in JSON format -o yaml # complete object in YAML format --v=6 # verbosity --no-headers # create, update objects kubectl apply -f obj.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://jreisinger.github.io/notes/posts/docker/</link>
      <pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/docker/</guid>
      <description>Docker is a container technology. Cointainers standardize software packaging. It&amp;rsquo;s a well timed fusion of
 kernel features filesystem tricks networking hacks  Think of a container not as a virtual machine but a very lightweight wrapper around an isolated group of processes. These processes are restricted to private root filesystem and process namespace.
Docker revision-controls:
 filesystem layers image tags  Architecture Terminology Docker server - the docker command run in daemon mode on a Linux host:</description>
    </item>
    
    <item>
      <title>Network Programming</title>
      <link>https://jreisinger.github.io/notes/posts/net-prog/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/net-prog/</guid>
      <description>Sockets  a method for IPC endpoints for communication allow processes to communicate on a host or over a network  Socket types 1) SOCK_STREAM - similar to pipes
 bidirectional &amp;ndash;&amp;gt; full duplex (simultaneous communication in both directions) connection-oriented = like a phone call byte-stream = no concept of message boundaries reliable = data will be either delivered exactly as transmitted or we&amp;rsquo;ll get notification of a failure  2) SOCK_DGRAM - only garantee that message borders will be preserverd when read (but lower overhead)</description>
    </item>
    
    <item>
      <title>Devops</title>
      <link>https://jreisinger.github.io/notes/posts/devops/</link>
      <pubDate>Sun, 20 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/devops/</guid>
      <description>The opposite of DevOps is despair. &amp;ndash; Gene Kim
If HW and SW are sufficiently fault tolerant, the remaining problems are human. &amp;ndash; TPoCSA
CAMS: culture, automation, measurement, and sharing. &amp;ndash; D. Edwards, J. Willis (2010)
 DevOps is a set of techniques to solve the chronic conflict between Development an IT Operations. This conflict causes:
 increased time to market problematic code deployments increased number of Sev 1 outages unplanned work technical debt  The techniques are:</description>
    </item>
    
    <item>
      <title>tcpdump</title>
      <link>https://jreisinger.github.io/notes/posts/tcpdump/</link>
      <pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/tcpdump/</guid>
      <description>despite its name it can do much more than capturing TCP headers can sniff traffic on many network types (including 802.1Q VLAN) de facto standard for command line packet analysis in Unix environment  Useful options -D &amp;ndash; list available interfaces
-i INTERFACE &amp;ndash; listen on INTERFACE (default: lowest numbered interface)
-w FILE &amp;ndash; write raw packets to FILE
-r FILE &amp;ndash; read packets from FILE
-nn &amp;ndash; turn off host and protocol name resolution (to avoid generating DNS packets)</description>
    </item>
    
    <item>
      <title>Signals</title>
      <link>https://jreisinger.github.io/notes/posts/signals/</link>
      <pubDate>Tue, 20 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/signals/</guid>
      <description>Signal &amp;ndash; a message from the kernel (or a process) to a process. Used for:
 errors (kernel saying: &amp;ldquo;You can&amp;rsquo;t touch that area of memory!&amp;rdquo;) events (death of a child, interrupt with Ctrl-C)  To ask the kernel to a send a signal:
kill [-SIGNAL] PID # default signal is TERM Selected signal types:
 TERM (15) - terminate a process (polite request to die, i.e. can and should be caught) KILL (9) - terminate a process at the kernel level and remove it forcibly from memory (cannot be caught, blocked or ignored) INT (2) - interrupt, sent by the terminal driver on Ctrl-C.</description>
    </item>
    
    <item>
      <title>Networking basics</title>
      <link>https://jreisinger.github.io/notes/posts/net-basics/</link>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/net-basics/</guid>
      <description>Networking models OSI layering provides for standard interfaces between layers and has these benefits:
 higher layers are shielded from the complexity of the lower layers application &amp;ldquo;thinks&amp;rdquo; it&amp;rsquo;s directly communicating with another application through the standard sockets API one vendor writes SW implementing higher layers (e.g. web browser), another vendor writes SW implementing lower layers (e.g. M$&amp;rsquo;s built-in TCP/IP SW)  OSI and TCP/IP models:
 OSI TCP/IP TCP/IP Sample original updated protocol +------------+ +------------+ +------------+ +----------------+ Contains the &amp;quot;language&amp;quot; that 7 |Application | | | | | |Telnet HTTP | apps and servers use to |------------+ | | | | |FTP SMTP | communicate 6 |Presentation| |Application | 5-7 |Application | |POP3 VoIP | |------------+ | | | | |SNMP DNS Halo 3 | 5 |Session | | | | | |arp traceroute | |------------+- - -+------------+- - -+------------+- - -+----------------+ data transmission 4 |Transport | |Transport | 4 |Transport | |TCP UDP | characteristics |------------+- - -+------------+- - -+------------+- - -+----------------+ how to move packets 3 |Network | |Internetwork| 3 |Internetwork| |IP ICMP | from src to dst |------------+- - -+------------+- - -+------------+- - -+----------------+ 2 |Data link | |Network | 2 |Data link | |Eth HDLC PPP ARP| |------------+ | |- - -|------------|- - -|----------------| how to send raw data 1 |Physical | |access | 1 |Physical | |Eth RJ-45 V.</description>
    </item>
    
    <item>
      <title>GRUB 2</title>
      <link>https://jreisinger.github.io/notes/posts/grub2/</link>
      <pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/grub2/</guid>
      <description>GRUB 2 vs. GRUB (Legacy)
 simpler code structure modular model internationalization (support for non-ASCII character sets) GUI interface  /boot/grub/grub.cfg still exists but is not supposed to be edited.
Files and directories
 /boot/grub/grub.cfg - automatically created central config file /etc/default/grub - general options (no menu entries) /etc/grub.d - helper scripts; you can add scripts here to add menu entries  GRUB 2 generally automates lot of steps (helper scripts search the partitions for known OSs and create the required entries).</description>
    </item>
    
    <item>
      <title>Meaning of Life by Zentara</title>
      <link>https://jreisinger.github.io/notes/posts/meaning-of-life-by-zentara/</link>
      <pubDate>Mon, 19 Jan 2015 17:07:00 +0200</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/meaning-of-life-by-zentara/</guid>
      <description>http://zentara.net/ =&amp;gt; Deep Thoughts =&amp;gt; Want to know the meaning of life?
This is the essence of the meaning of life Once you read it, you will never be able to get it out of your subconcious mind. It will crack open the door to the next level of conciousness. .................................................................... Your most previous incarnation, was a 9-month life inside your mother. During this life, you were developing the organs needed to exist on the next level.</description>
    </item>
    
    <item>
      <title>Generate Random File</title>
      <link>https://jreisinger.github.io/notes/posts/gen_rand_file/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/gen_rand_file/</guid>
      <description> How to generate a file of a defined size (ex. 100MB) with random content
binary file: dd if=/dev/urandom of=file.dat bs=1M count=100  or
dd if=/dev/urandom of=file.dat bs=1024 count=`echo $((100*1024))`   bs &amp;ndash; block size in bytes  text file: base64 /dev/urandom | dd of=file.txt bs=1M count=100 iflag=fullblock   base64 represents (encodes) binary data using printable ASCII characters  empty file: dd if=/dev/zero of=file.dat bs=1M count=100  </description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://jreisinger.github.io/notes/posts/git/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/git/</guid>
      <description>Git is a free &amp;amp; open source, distributed version (revision) control system created by Linus Torvalds.
Every Git clone is a full-fledged [in svk: ucelený, kompletný] repository with complete history and full revision tracking capabilities, not dependent on network access or a central server.
Branching and merging are fast and easy to do.
Git uses an intelligent compression system to reduce the cost of storing the entire history.
First-Time Git Setup Introduce yourself to git with your name and public email address before doing any operation:</description>
    </item>
    
    <item>
      <title>System administration philosophy of AE. Frish</title>
      <link>https://jreisinger.github.io/notes/posts/sysadmin-philosophy/</link>
      <pubDate>Sat, 01 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/sysadmin-philosophy/</guid>
      <description> Know how things work. Plan it before you do it. Make it reversible (backups help a lot with this one). Make changes incrementally. Test, test, test, before you unleash it on the world.  </description>
    </item>
    
  </channel>
</rss>