<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Net on Notes</title>
    <link>https://jreisinger.github.io/notes/categories/net/</link>
    <description>Recent content in Net on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jreisinger.github.io/notes/categories/net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Network Programming</title>
      <link>https://jreisinger.github.io/notes/posts/net-prog/</link>
      <pubDate>Fri, 10 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/net-prog/</guid>
      <description>Sockets
 a method for IPC endpoints for communication allow processes to communicate on a host or over a network  Socket types
1) SOCK_STREAM - similar to pipes
 bidirectional &amp;ndash;&amp;gt; full duplex (simultaneous communication in both directions) connection-oriented = like a phone call byte-stream = no concept of message boundaries reliable = data will be either delivered exactly as transmitted or we&amp;rsquo;ll get notification of a failure  2) SOCK_DGRAM - only garantee that message borders will be preserverd when read (but lower overhead)</description>
    </item>
    
    <item>
      <title>tcpdump</title>
      <link>https://jreisinger.github.io/notes/posts/tcpdump/</link>
      <pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/tcpdump/</guid>
      <description>despite its name it can do much more than capturing TCP headers can sniff traffic on many network types (including 802.1Q VLAN) de facto standard for command line packet analysis in Unix environment  Useful options -D &amp;ndash; list available interfaces
-i INTERFACE &amp;ndash; listen on INTERFACE (default: lowest numbered interface)
-w FILE &amp;ndash; write raw packets to FILE
-r FILE &amp;ndash; read packets from FILE
-nn &amp;ndash; turn off host and protocol name resolution (to avoid generating DNS packets)</description>
    </item>
    
    <item>
      <title>Networking basics</title>
      <link>https://jreisinger.github.io/notes/posts/net-basics/</link>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/net-basics/</guid>
      <description>Networking models OSI layering provides for standard interfaces between layers and has these benefits:
 higher layers are shielded from the complexity of the lower layers application &amp;ldquo;thinks&amp;rdquo; it&amp;rsquo;s directly communicating with another application through the standard sockets API one vendor writes SW implementing higher layers (e.g. web browser), another vendor writes SW implementing lower layers (e.g. M$&amp;rsquo;s built-in TCP/IP SW)  OSI and TCP/IP models:
 OSI TCP/IP TCP/IP Sample original updated protocol +------------+ +------------+ +------------+ +----------------+ Contains the &amp;quot;language&amp;quot; that 7 |Application | | | | | |Telnet HTTP | apps and servers use to |------------+ | | | | |FTP SMTP | communicate 6 |Presentation| |Application | 5-7 |Application | |POP3 VoIP | |------------+ | | | | |SNMP DNS Halo 3 | 5 |Session | | | | | |arp traceroute | |------------+- - -+------------+- - -+------------+- - -+----------------+ data transmission 4 |Transport | |Transport | 4 |Transport | |TCP UDP | characteristics |------------+- - -+------------+- - -+------------+- - -+----------------+ how to move packets 3 |Network | |Internetwork| 3 |Internetwork| |IP ICMP | from src to dst |------------+- - -+------------+- - -+------------+- - -+----------------+ 2 |Data link | |Network | 2 |Data link | |Eth HDLC PPP ARP| |------------+ | |- - -|------------|- - -|----------------| how to send raw data 1 |Physical | |access | 1 |Physical | |Eth RJ-45 V.</description>
    </item>
    
  </channel>
</rss>