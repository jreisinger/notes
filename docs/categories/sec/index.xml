<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sec on Notes</title>
    <link>https://jreisinger.github.io/notes/categories/sec/</link>
    <description>Recent content in Sec on Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jreisinger.github.io/notes/categories/sec/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hashes</title>
      <link>https://jreisinger.github.io/notes/posts/hashes/</link>
      <pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/hashes/</guid>
      <description>There are several classes of hashes (hash functions) used for different purposes:
 hash datatype in Perl (maps a lookup string to a memory location; fast and short) networking protocols checks like CRC or Adler (rarely go over 32-bits in length) cryptographic hashes (this article is about them)  Cryptographic hashes
 provide an encryption using an algorithm and no key a variable length plaintext is &amp;ldquo;hashed&amp;rdquo; into a fixed-length hash value (also called a message digest or a hash) primarily used to provide integrity &amp;ndash;&amp;gt; if the hash changed, the plaintext must have changed have an &amp;ldquo;avalanche effect&amp;rdquo; &amp;ndash;&amp;gt; changing just one bit of input creates a completely different output  Collisions</description>
    </item>
    
    <item>
      <title>tcpdump</title>
      <link>https://jreisinger.github.io/notes/posts/tcpdump/</link>
      <pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/tcpdump/</guid>
      <description>despite its name it can do much more than capturing TCP headers can sniff traffic on many network types (including 802.1Q VLAN) de facto standard for command line packet analysis in Unix environment  Useful options:
-D &amp;ndash; list available interfaces
-i INTERFACE &amp;ndash; listen on INTERFACE (default: lowest numbered interface)
-w FILE &amp;ndash; write raw packets to FILE
-r FILE &amp;ndash; read packets from FILE
-nn &amp;ndash; turn off host and protocol name resolution (to avoid generating DNS packets)</description>
    </item>
    
    <item>
      <title>tcpdump2</title>
      <link>https://jreisinger.github.io/notes/posts/tcpdump2/</link>
      <pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://jreisinger.github.io/notes/posts/tcpdump2/</guid>
      <description>despite its name it can do much more than capturing TCP headers can sniff traffic on many network types (including 802.1Q VLAN) de facto standard for command line packet analysis in Unix environment  Useful options:
-D &amp;ndash; list available interfaces
-i INTERFACE &amp;ndash; listen on INTERFACE (default: lowest numbered interface)
-w FILE &amp;ndash; write raw packets to FILE
-r FILE &amp;ndash; read packets from FILE
-nn &amp;ndash; turn off host and protocol name resolution (to avoid generating DNS packets)</description>
    </item>
    
  </channel>
</rss>